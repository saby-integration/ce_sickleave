
#Область ОтправкаСообщенияСЭДО

Процедура ОтправитьСообщениеСЭДО(ОповещениеОбратногоВызова, ПараметрыСообщения) Экспорт 
	
	// Получение ссылки на документ, который отправляем
	ИндексСтрокиОтправляемогоДокумента = ОповещениеОбратногоВызова.ДополнительныеПараметры.Индекс; 
	СтрокаОтправляемогоДокумента = ОповещениеОбратногоВызова.Модуль.Список[ИндексСтрокиОтправляемогоДокумента];
	ПараметрыСообщения.Вставить("СсылкаНаДокумент", СтрокаОтправляемогоДокумента.Ссылка); 
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	Контекст.Вставить("ПараметрыСообщения", ПараметрыСообщения);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОтправитьСообщениеСЭДОПослеПолученияКонтекстаЭДО",
		Saby_ЭДОСФССКлиент,
		Контекст
	);	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ОтправитьСообщениеСЭДОПослеПолученияКонтекстаЭДО(Результат, Контекст) Экспорт 

	ОповещениеОбратногоВызова = Контекст.ОповещениеОбратногоВызова;
	ПараметрыСообщения = Контекст.ПараметрыСообщения;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Неопределено);
		Возврат;
	КонецЕсли;	
	Контекст.Вставить("КонтекстЭДОКлиент", КонтекстЭДОКлиент); 
	
	// Подготовка параметров для корректного формирования запроса и его подписания
	ПараметрыСообщения.Вставить("Операция", "PutMessage");
	ВыгрузкаЗапросаОперацииСЭДО = СформироватьВыгрузкуЗапросаОперацииСЭДО(
		КонтекстЭДОКлиент, 
		ПараметрыСообщения
	);
	
	// Подписание запроса
	Оповещение = Новый ОписаниеОповещения("ОтправитьСообщениеСЭДОПослеПодписанияЗапроса",
		Saby_ЭДОСФССКлиент,
		Контекст
	);
	КонтекстЭДОКлиент.АдресПодписанногоSOAPОперацииСЭДОФСС(
		Оповещение,
		ВыгрузкаЗапросаОперацииСЭДО,
		Истина,
		Истина,
		Ложь
	);
	
КонецПроцедуры

Процедура ОтправитьСообщениеСЭДОПослеПодписанияЗапроса(РезультатПодписиШифрования, Контекст) Экспорт 

	ПараметрыСообщения = Контекст.ПараметрыСообщения;
	ОповещениеОбратногоВызова = Контекст.ОповещениеОбратногоВызова;
	КонтекстЭДОКлиент = Контекст.КонтекстЭДОКлиент;
	// Структура, которую ждёт 1С при вызове колбэка перехваченной функции
   	Результат = Новый Структура("Выполнено, ОписаниеОшибки, ИдентификаторЗапроса", Ложь, "", "");
	
	Если НЕ ЗначениеЗаполнено(РезультатПодписиШифрования) Тогда 
		Результат.ОписаниеОшибки = 
			"Произошла ошибка при выполнении криптоопераций над запросом к серверу СЭДО ФСС.";
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	ПараметрыСообщения.Вставить(
		"АдресПодписаногоЗапросаSOAP", 
		РезультатПодписиШифрования.АдресПодписаногоЗапросаSOAP
	);

	РезультатОтправки = Saby_ЭДОСФСС.ОтправитьСообщениеСЭДОЧерезAPIСБИС(ПараметрыСообщения);
	Если Не РезультатОтправки.Отправлено Тогда
		// Вызываю 1Совский колбэк перехваченной функции
		Результат.ОписаниеОшибки = СтрШаблон(
			ПараметрыСообщения.ОписаниеОшибки,
			РезультатОтправки.ОписаниеОшибки
		);
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
    Результат.Выполнено = Истина;                                           
	// Передаю пустой идентификатор, что бы 1С корректно отработала и считала запрос отправленным.
	// В дальнейшем этот идентификатор будет изменен, когда мы получим SEDI_UUID
	Результат.ИдентификаторЗапроса = "00000000-0000-0000-0000-000000000000";	
	
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

Функция СформироватьВыгрузкуЗапросаОперацииСЭДО(КонтекстЭДОКлиент, ПараметрыСообщения)
	
	ТипыСообщений = ДокументооборотСФССКлиентСервер.ТипыСообщенийСЭДО();
	ЭтоПодписываемаяВыгрузка = (
		ПараметрыСообщения.ТипСообщения = ТипыСообщений.ТипСообщенияСозданиеМашиночитаемойДоверенностиФСС
		ИЛИ ПараметрыСообщения.ТипСообщения = ТипыСообщений.ТипСообщенияОтзывМашиночитаемойДоверенностиФСС
		ИЛИ ПараметрыСообщения.ТипСообщения = ТипыСообщений.ТипСообщенияЗапросСпискаМашиночитаемыхДоверенностейФСС
		ИЛИ ПараметрыСообщения.ТипСообщения = ТипыСообщений.ТипСообщенияЗапросМашиночитаемойДоверенностиФСС
		ИЛИ ПараметрыСообщения.ТипСообщения = ТипыСообщений.ТипСообщенияЗапросПолномочийУполномоченногоМашиночитаемойДоверенностиФСС
	);
	
	СодержимоеСообщения = ?(
		ЭтоАдресВременногоХранилища(ПараметрыСообщения.СодержимоеИлиАдресСообщения),
		ПолучитьИзВременногоХранилища(ПараметрыСообщения.СодержимоеИлиАдресСообщения),
		ПараметрыСообщения.СодержимоеИлиАдресСообщения
	); 
	
	ВыгрузкаЗапросаОперацииСЭДО = Новый Структура;
	ВыгрузкаЗапросаОперацииСЭДО.Вставить("Организация", ПараметрыСообщения.Организация);
	ВыгрузкаЗапросаОперацииСЭДО.Вставить("Операция", ПараметрыСообщения.Операция);
	ВыгрузкаЗапросаОперацииСЭДО.Вставить("РегистрационныйНомерФСС", ПараметрыСообщения.РегистрационныйНомерФСС);
	ВыгрузкаЗапросаОперацииСЭДО.Вставить("ТекстЗапроса",
		КонтекстЭДОКлиент.ТекстЗапросаОтправкиСообщенияСЭДОФСС(
			ПараметрыСообщения.РегистрационныйНомерФСС,
			ПараметрыСообщения.ТипСообщения,
			?(ЭтоПодписываемаяВыгрузка, Неопределено, СодержимоеСообщения),
			ДокументооборотСФССКлиентСервер.НастройкиТекстовЗапросовСЭДОФСС()
		)
	);
	Если ЭтоПодписываемаяВыгрузка Тогда
		ВыгрузкаЗапросаОперацииСЭДО.Вставить("СодержимоеСообщения", ПараметрыСообщения.СодержимоеСообщения);
		ИдентификаторРодителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ПараметрыСообщения,
			"ИдентификаторРодителя", 
			""
		);
		ВыгрузкаЗапросаОперацииСЭДО.Вставить("ИдентификаторРодителя", ИдентификаторРодителя);
	КонецЕсли;
	
	Возврат ВыгрузкаЗапросаОперацииСЭДО;
	
КонецФункции

#КонецОбласти


#Область ПолучениеСообщенийСЭДО

// вызывается при получении сообщений ФСС за период
// в стандартном коде в Идентификаторах лежат ид сообщений ФСС, которые надо переполучить
// в нашем случае в них лежат даты, за которые нужно переполучить сообщения (пришлось так извратиться,
// т.к. даты введенные пользователем не передаются в экспортную функию получения сообщений)
Процедура ПолучитьСообщенияСЭДО(ОповещениеОбратногоВызова, Организация, Идентификаторы) Экспорт 
	
	// Возможно придется получить сообщения и по идентификаторам, тогда нужно будет сделать проверку
	// по типу идентификаторов.
	ДатаСообщенийС = Неопределено;
	ДатаСообщенийПо = Неопределено;
	Для Каждого Дата Из Идентификаторы Цикл
		Если ДатаСообщенийС = Неопределено Тогда
			ДатаСообщенийС = Дата;
			ДатаСообщенийПо = КонецДня(Дата);
			Продолжить;
		КонецЕсли;
		
		ДатаСообщенийС = Мин(ДатаСообщенийС, Дата);
		ДатаСообщенийПо = КонецДня(Макс(ДатаСообщенийПо, Дата));
	КонецЦикла;
	
	Организации = Новый Массив;
	Организации.Добавить(Организация); 
	
	Результат = Новый Структура(
		"БылиОшибки, Ошибки, ДанныеСообщений, РезультатыПолучения",
		Ложь,
		Новый Массив,
		Новый Массив,
		Новый Массив
	);
	// очистим идентификаторы, т.к. в нашем случае в них лежат даты, а заполним при обработке СпискаИзменений, чтобы правильно вывести результат пользователю
	ОповещениеОбратногоВызова.ДополнительныеПараметры.ИдентификаторыСообщений[Организация] = Новый Массив;
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	Контекст.Вставить("Результат", Результат);	
	Контекст.Вставить("Организация", Организация);
	Контекст.Вставить("ДатаСообщенийС", ДатаСообщенийС);
	Контекст.Вставить("ДатаСообщенийПо", ДатаСообщенийПо);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьСообщенияСЭДОПослеПолученияКонтекстаЭДО",
		Saby_ЭДОСФССКлиент,
		Контекст
	);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПолучитьСообщенияСЭДОПослеПолученияКонтекстаЭДО(Результат, Контекст) Экспорт
	
	ОповещениеОбратногоВызова = Контекст.ОповещениеОбратногоВызова;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Неопределено);
		Возврат;
	КонецЕсли;
	Контекст.Вставить("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	
	СвойстваОрганизации = Saby_ЭДОСФССПовтИсп.СвойстваОрганизацииДляОбмена(Контекст.Организация);
	СвойстваОрганизации.Вставить("Ссылка", Контекст.Организация);
	Контекст.Вставить("СвойстваОрганизации", СвойстваОрганизации);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ОбработатьСписокИзмененийЗавершение",
		Saby_ЭДОСФССКлиент,
		Контекст
	);
	Контекст.Вставить("Оповещение", ОписаниеОповещения);
			
	ОбработатьСписокИзменений(Контекст);      
			
КонецПроцедуры

Процедура ПолучитьСообщенияСЭДОПослеПолученияСообщения(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		ВыполнитьОбработкуОповещения(
			Контекст.ОповещениеОбратногоВызова,
			Контекст.Результат
		);
		Возврат;
	КонецЕсли;
	
	Контекст.Результат.РезультатыПолучения.Добавить(Результат);	
	
КонецПроцедуры


Функция ПолучитьВходящиеСообщенияСЭДО(ОповещениеОбратногоВызова, Организации) Экспорт
		
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	Контекст.Вставить("Организации", Организации);
	Контекст.Вставить("ДатаСообщенийС", Неопределено);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПолучитьВходящиеСообщенияСЭДОПослеПолученияКонтекстаЭДО",
		Saby_ЭДОСФССКлиент,
		Контекст
	);	
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецФункции

Процедура ПолучитьВходящиеСообщенияСЭДОПослеПолученияКонтекстаЭДО(Результат, Контекст) Экспорт
	
	ОповещениеОбратногоВызова = Контекст.ОповещениеОбратногоВызова;
	Организации = Контекст.Организации;
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;	
	Если КонтекстЭДОКлиент = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ТекстОшибки);
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Неопределено);
		Возврат;
	КонецЕсли;
	Контекст.Вставить("КонтекстЭДОКлиент", КонтекстЭДОКлиент); 
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("ДанныеСообщенийПоОрганизациям", Новый Соответствие);
	РезультатОперации.Вставить("БылиОшибки", Ложь);
	РезультатОперации.Вставить("ОшибкиПоОрганизациям", Новый Соответствие);
	РезультатОперации.Вставить("РезультатыПоОрганизациям", Новый Соответствие);
	РезультатОперации.Вставить("ОписаниеОшибки", "");
	Контекст.Вставить("Результат", РезультатОперации);   
	Контекст.Вставить("ИндексОрганизации", 0); 
	
	context_params = Saby_ЭДОСФСС.ПолучитьНастройкиПодключения();

	Контекст.Вставить("context_params", context_params);

	ПолучитьВходящиеСообщенияСЭДОФССЦикл(Контекст);
	
КонецПроцедуры

Процедура ПолучитьВходящиеСообщенияСЭДОФССЦикл(Контекст) Экспорт
	
	ОповещениеОбратногоВызова 	= Контекст.ОповещениеОбратногоВызова;
	РезультатОперации 			= Контекст.Результат;
	ИндексОрганизации 			= Контекст.ИндексОрганизации;
	Организации 				= Контекст.Организации;
	
	Если ИндексОрганизации >= Организации.Количество() Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, РезультатОперации);
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("Организация", Организации[ИндексОрганизации]);
	Контекст.Вставить("ИтерацияПоОрганизации", 0);
	
	ПолучитьВходящиеСообщенияСЭДОФССПоОрганизацииЦикл(Контекст);
		
КонецПроцедуры

Процедура ПолучитьВходящиеСообщенияСЭДОФССПоОрганизацииЦикл(Контекст) Экспорт
	
	Если Контекст.ИтерацияПоОрганизации > 20 Или (Контекст.ИтерацияПоОрганизации > 0 и Контекст.ОбработаноСлужебных = 0 и Контекст.ОбработаноИзменений = 0) Тогда
		Контекст.ИндексОрганизации = Контекст.ИндексОрганизации + 1;	
		ПолучитьВходящиеСообщенияСЭДОФССЦикл(Контекст);	
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьСписокИзмененийПослеОбработкиСлужебных",
		ЭтотОбъект,
		Контекст);
	ОбработатьСписокСлужебныхЭтапов(Оповещение, Контекст);
	
КонецПроцедуры

Функция ОбработатьСписокСлужебныхЭтапов(Оповещение, Контекст) 
	Результат = Ложь;
	Организация = Контекст.Организация;
	context_params = Контекст.context_params;
	
	Фильтр = Новый Структура;
	Фильтр.Вставить(
	"Навигация", Новый Структура(
	"РазмерСтраницы", Формат(20, "ЧГ=0")
	)
	);   
	
	Фильтр.Вставить("ТолькоОтчетность", "Да");
	Фильтр.Вставить("Тип", "ДокументСЭДО");
	
	НашаОрганизация = Saby_ЭДОСФССПовтИсп.Saby_НашаОрганизация(Организация);
	Фильтр.Вставить("НашаОрганизация", НашаОрганизация);
	СвойстваОрганизации = НашаОрганизация.СвойстваОрганизации;
	
	Контекст.Вставить("Фильтр", Фильтр);
	Контекст.Вставить("СвойстваОрганизации", СвойстваОрганизации);  
	Контекст.Вставить("ЕстьЕще", "Да");
	Контекст.Вставить("ОбработаноСлужебных", 0);
	Контекст.Вставить("Оповещение", Оповещение);
	ПолучитьСписокСлужебныхЭтаповЦикл(Контекст);
		
КонецФункции

Процедура ПолучитьСписокСлужебныхЭтаповЦикл(Контекст) 

	Если Контекст.ЕстьЕще <> "Да" Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.ОбработаноСлужебных);
		Возврат;	
	КонецЕсли;
	Попытка
		СписокСлужебныхЭтапов = Saby_ЭДОСФСС.СписокСлужебныхЭтаповПоДокументамСЭДО(Контекст.context_params, Контекст.Фильтр);
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке(); 
		ДобавитьОшибкуПолученияСообщенийФСС(Контекст, ИнфОбОшибке);
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст);
		Возврат;
	КонецПопытки;
	Контекст.Вставить("СлужебныеДокументы", СписокСлужебныхЭтапов["Документ"]);
	Контекст.Вставить("ИндексСлужебногоДокумента", 0);
	Контекст.Вставить("ЕстьЕще", СписокСлужебныхЭтапов["Навигация"]["ЕстьЕще"]);
	
	ОбработатьСписокСлужебныхЭтаповЦикл(Контекст);
	
КонецПроцедуры

Процедура ОбработатьСписокСлужебныхЭтаповЦикл(Контекст) 
	СлужебныеДокументы = Контекст.СлужебныеДокументы;
	ИндексСлужебногоДокумента = Контекст.ИндексСлужебногоДокумента;
	СвойстваОрганизации = Контекст.СвойстваОрганизации;
	
	Если ИндексСлужебногоДокумента >= СлужебныеДокументы.Количество() Тогда
		ПолучитьСписокСлужебныхЭтаповЦикл(Контекст);
		Возврат;
	КонецЕсли;
	
	Документ = СлужебныеДокументы[ИндексСлужебногоДокумента];
			
	Если Документ["Тип"] <> "ДокументСЭДО" И Документ["Тип"] <> "DocumentSEDI" Тогда
		Попытка
			Saby_ЭДОСФСС.ОтложитьСлужебныйЭтап(Документ);
		Исключение
			ИнфОбОшибке = ИнформацияОбОшибке();
			ДобавитьОшибкуПолученияСообщенийФСС(Контекст, ИнфОбОшибке);
		КонецПопытки;
		Контекст.ОбработаноСлужебных = Контекст.ОбработаноСлужебных + 1;
		Контекст.ИндексСлужебногоДокумента = Контекст.ИндексСлужебногоДокумента +1;
		ОбработатьСписокСлужебныхЭтаповЦикл(Контекст);
	ИначеЕсли Документ["Этап"][0]["Действие"][0]["ТребуетПодписания"] = "Да" Тогда	
		ОпределитьТипИПодписатьСлужебныеДокументы(Документ, Контекст);
	ИначеЕсли Документ["Этап"][0]["Действие"][0]["ТребуетРасшифровки"] = "Да" Тогда 
		РасшифроватьОтветСлужебногоЭтапа(Документ, Контекст);
	Иначе
		// Если этап не требует подписания или расшифровки всё равно необходимо подгтовить выполнить действие
		ПараметрыСообщения = Новый Структура; 
		ПараметрыСообщения.Вставить("Организация", СвойстваОрганизации.Ссылка);
		ПараметрыСообщения.Вставить("РегистрационныйНомерФСС", СвойстваОрганизации.РегистрационныйНомерФСС);
		ПараметрыСообщения.Вставить("СертификатСтрахователяОтпечаток", СвойстваОрганизации.СертификатСтрахователяОтпечаток);
		
		Попытка
			Saby_ЭДОСФСС.ПодготовитьВыполнитьДействие(Документ, ПараметрыСообщения);
		Исключение
			ИнфОбОшибке = ИнформацияОбОшибке();
			ДобавитьОшибкуПолученияСообщенийФСС(Контекст, ИнфОбОшибке);
		КонецПопытки;
		Контекст.ОбработаноСлужебных = Контекст.ОбработаноСлужебных + 1;
		Контекст.ИндексСлужебногоДокумента = Контекст.ИндексСлужебногоДокумента +1;
		ОбработатьСписокСлужебныхЭтаповЦикл(Контекст);
	КонецЕсли;
				
КонецПроцедуры

Процедура ОпределитьТипИПодписатьСлужебныеДокументы(Документ, Контекст)
	
	НазваниеЭтапа = НРег(Документ["Этап"][0]["Название"]);
	Если НазваниеЭтапа = "подтверждение" Тогда
		ПодписатьПодтверждениеОПолученииСообщения(Документ, Контекст);
	Иначе
		ПодписатьЗапросСлужебногоЭтапа(Документ, Контекст);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписатьПодтверждениеОПолученииСообщения(Документ, Контекст)
	
	КонтекстЭДОКлиент = Контекст.КонтекстЭДОКлиент;
	СвойстваОрганизации = Контекст.СвойстваОрганизации;
	
	Этап = Документ["Этап"][0];
	
	// Идентификатор этапа состоит из двух идентификаторов разделенных подчеркиванием.
	// Левый идентификатор - это идентификатор сообщения ФСС на который небходимо сформировать 
	// и подписать запрос. 
	ИдентификаторСообщения = СтрРазделить(Этап["Идентификатор"], "_")[0];
	
	// Далее идёт фомирование и подписание запроса
	ПараметрыСообщения = Новый Структура; 
	
	// ПодтверждениеПрочтенияСообщенийСЭДОФСС
	ПараметрыСообщения.Вставить("ТипСообщения", 6);
	ПараметрыСообщения.Вставить("Организация", СвойстваОрганизации.Ссылка);
	ПараметрыСообщения.Вставить("ОписаниеОшибки",
		НСтр("ru='Не удалось отправить подтверждение о получении сообщения в СЭДО ФСС.
		|%1'"));
	ПараметрыСообщения.Вставить("Операция", "PutMessage");
	ПараметрыСообщения.Вставить("РегистрационныйНомерФСС", СвойстваОрганизации.РегистрационныйНомерФСС);
	ПараметрыСообщения.Вставить("СертификатСтрахователяОтпечаток", СвойстваОрганизации.СертификатСтрахователяОтпечаток);
	ПараметрыСообщения.Вставить("ТипВзаимодействия", 2);
	
	ИдентификаторыСообщений = Новый Массив;
	ИдентификаторыСообщений.Добавить(ИдентификаторСообщения);
	СодержимоеСообщения =
		КонтекстЭДОКлиент.СодержимоеСообщенияПодтверждениеПрочтенияСообщений(ИдентификаторыСообщений);
	
	ТекстЗапроса = КонтекстЭДОКлиент.ТекстЗапросаОтправкиСообщенияСЭДОФСС(
		ПараметрыСообщения.РегистрационныйНомерФСС,
		ПараметрыСообщения.ТипСообщения,
		СодержимоеСообщения,
		ДокументооборотСФССКлиентСервер.НастройкиТекстовЗапросовСЭДОФСС());
	ПараметрыСообщения.Вставить("ТекстЗапроса", ТекстЗапроса);
	
	Контекст.Вставить("Документ", Документ);
	Контекст.Вставить("ПараметрыСообщения", ПараметрыСообщения);		
	Оповещение = Новый ОписаниеОповещения("ПодписатьЗапросСлужебногоЭтапаПослеПодписанияЗапроса",
		Saby_ЭДОСФССКлиент,	Контекст);
	
	// Функция подписания запроса
	КонтекстЭДОКлиент.АдресПодписанногоSOAPОперацииСЭДОФСС(Оповещение, ПараметрыСообщения, Истина, Истина, Ложь);
	
КонецПроцедуры 

Процедура ПодписатьЗапросСлужебногоЭтапа(Документ, Контекст)
	
	КонтекстЭДОКлиент = Контекст.КонтекстЭДОКлиент;
	СвойстваОрганизации = Контекст.СвойстваОрганизации;
	
	Этап = Документ["Этап"][0];
	// Идентификатор этапа состоит из двух идентификаторов разделенных подчеркиванием.
	// Левый идентификатор - это идентификатор сообщения ФСС на который небходимо сформировать 
	// и подписать запрос. 
	ИдентификаторСообщения = СтрРазделить(Этап["Идентификатор"], "_")[0];
	
	// Далее идёт фомирование и подписание запроса
	ПараметрыСообщения = Новый Структура; 
	
	ПараметрыСообщения.Вставить("Организация", СвойстваОрганизации.Ссылка);
	ПараметрыСообщения.Вставить("Операция", "GetMessage");
	ПараметрыСообщения.Вставить("РегистрационныйНомерФСС", СвойстваОрганизации.РегистрационныйНомерФСС);
	ПараметрыСообщения.Вставить("СертификатСтрахователяОтпечаток", СвойстваОрганизации.СертификатСтрахователяОтпечаток);
	
	Настройки = ДокументооборотСФССКлиентСервер.НастройкиТекстовЗапросовСЭДОФСС();
	Настройки.ТипВзаимодействия = 2;
	ПараметрыСообщения.Вставить("ТекстЗапроса", КонтекстЭДОКлиент.ТекстЗапросаПолученияСообщенияСЭДОФСС(
		СвойстваОрганизации.РегистрационныйНомерФСС, ИдентификаторСообщения, Настройки));
	
	Контекст.Вставить("Документ", Документ);
	Контекст.Вставить("ПараметрыСообщения", ПараметрыСообщения);		
	Оповещение = Новый ОписаниеОповещения("ПодписатьЗапросСлужебногоЭтапаПослеПодписанияЗапроса",
		Saby_ЭДОСФССКлиент,	Контекст);
	
	// Функция подписания запроса
	КонтекстЭДОКлиент.АдресПодписанногоSOAPОперацииСЭДОФСС(Оповещение,	ПараметрыСообщения,	Истина,	Истина,	Ложь);
	
КонецПроцедуры 

Процедура ПодписатьЗапросСлужебногоЭтапаПослеПодписанияЗапроса(РезультатПодписиШифрования, Контекст) Экспорт 
	
	Попытка
		Если НЕ ЗначениеЗаполнено(РезультатПодписиШифрования) Тогда 
			ВызватьИсключение "Произошла ошибка при выполнении криптоопераций над запросом к серверу СЭДО ФСС.";
		КонецЕсли; 
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ДобавитьОшибкуПолученияСообщенийФСС(Контекст, ИнфОбОшибке);
		Контекст.ОбработаноСлужебных = Контекст.ОбработаноСлужебных + 1;
		Контекст.ИндексСлужебногоДокумента = Контекст.ИндексСлужебногоДокумента + 1;
		ОбработатьСписокСлужебныхЭтаповЦикл(Контекст);
		Возврат;
	КонецПопытки;
	
	Контекст.ПараметрыСообщения.Вставить(
		"АдресПодписаногоЗапросаSOAP", РезультатПодписиШифрования.АдресПодписаногоЗапросаSOAP);
	
	Попытка
		РезультатВыполненияДействия = Saby_ЭДОСФСС.ПодготовитьВыполнитьДействие(Контекст.Документ, Контекст.ПараметрыСообщения);
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ДобавитьОшибкуПолученияСообщенийФСС(Контекст, ИнфОбОшибке);
	КонецПопытки;
	Контекст.ОбработаноСлужебных = Контекст.ОбработаноСлужебных + 1;
	Контекст.ИндексСлужебногоДокумента = Контекст.ИндексСлужебногоДокумента +1;
	ОбработатьСписокСлужебныхЭтаповЦикл(Контекст);
	
КонецПроцедуры

Процедура РасшифроватьОтветСлужебногоЭтапа(Документ, Контекст)
	
	СвойстваОрганизации = Контекст.СвойстваОрганизации;
	
	ПараметрыСообщения = Новый Структура; 	
	ПараметрыСообщения.Вставить("Организация", СвойстваОрганизации.Ссылка);
	ПараметрыСообщения.Вставить("РегистрационныйНомерФСС", СвойстваОрганизации.РегистрационныйНомерФСС);
	ПараметрыСообщения.Вставить("СертификатСтрахователяОтпечаток", СвойстваОрганизации.СертификатСтрахователяОтпечаток);
	
	РезультатПодготовкиДействия = Saby_ЭДОСФСС.ПодготвитьДействие(
		Документ, 
		ПараметрыСообщения
	);
	
	// Обработка в цикле
	Контекст.Вставить("Итератор", -1);
	Контекст.Вставить("Документ", РезультатПодготовкиДействия);
    РасшифроватьОтветСлужебногоЭтапаЦикл(Контекст);
		
КонецПроцедуры

Процедура РасшифроватьОтветСлужебногоЭтапаЦикл(Контекст)
	
	Контекст.Итератор = Контекст.Итератор + 1;
	Если Контекст.Итератор > Контекст.Документ["Этап"][0]["Вложение"].ВГраница() Тогда
		Если Контекст.Свойство("ОшибкиРасшифровки") и Контекст.ОшибкиРасшифровки = Истина Тогда
			Контекст.Удалить("ОшибкиРасшифровки");   
		Иначе
			Попытка
				РезультатВыполненияДействия = Saby_ЭДОСФСС.ВыполнитьДействие(Контекст.Документ, Новый Структура);
			Исключение
				ИнфОбОшибке = ИнформацияОбОшибке();
				ДобавитьОшибкуПолученияСообщенийФСС(Контекст, ИнфОбОшибке);
			КонецПопытки;
		КонецЕсли;
		Контекст.ОбработаноСлужебных = Контекст.ОбработаноСлужебных + 1;
		Контекст.ИндексСлужебногоДокумента = Контекст.ИндексСлужебногоДокумента +1;
		ОбработатьСписокСлужебныхЭтаповЦикл(Контекст);
		Возврат;
	КонецЕсли;
	
	Вложение = Контекст.Документ["Этап"][0]["Вложение"][Контекст.Итератор];
	Если Не (Вложение["Зашифрован"] = "Да"
		И Вложение["ТипШифрования"] = "SOAPFSS") Тогда
		
		// Следующая итерация
		РасшифроватьОтветСлужебногоЭтапаЦикл(Контекст);
		Возврат;
	КонецЕсли;
	
	СообщениеФССXML = Saby_ЭДОСФСС.ЗагрузитьСообщениеФССXMLИзСбис(
		Вложение["Файл"]["Ссылка"]
	);
	// Это извращение нужно для того, что бы 1С корректно расшивровывала файл.
	// Нужны SOAP заголовки и так же удалить объявление XML у исходного текста что бы XML файл был корректным.
	МассивСтрок = СтрРазделить(СообщениеФССXML, Символы.ПС, Ложь);
	// Удаление объявления XML
	МассивСтрок.Удалить(0);
	СообщениеФССXML = СтрШаблон("<SOAP-ENV:Envelope xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"">
	|	<SOAP-ENV:Header />
	|	<SOAP-ENV:Body>
	|		%1
	|	</SOAP-ENV:Body>
	|</SOAP-ENV:Envelope>", СтрСоединить(МассивСтрок, Символы.ПС));
		
	Оповещение = Новый ОписаниеОповещения(
		"РасшифроватьОтветСлужебногоЭтапаЦиклЗавершение",
		Saby_ЭДОСФССКлиент,
		Контекст
	);
	// Расшифровка сообщения
	Контекст.КонтекстЭДОКлиент.ПроверитьПодписьSOAPОтветаЭЛНВФСС(
		Оповещение,
		Контекст.СвойстваОрганизации.Ссылка,
		ПоместитьВоВременноеХранилище(СообщениеФССXML, Контекст.КонтекстЭДОКлиент.УникальныйИдентификатор),
		Истина,,,
		Истина
	);
			
КонецПроцедуры

Процедура РасшифроватьОтветСлужебногоЭтапаЦиклЗавершение(Результат, Контекст) Экспорт

	Если Не Результат.Выполнено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ОписаниеОшибки);
		Контекст.Вставить("ОшибкиРасшифровки", Истина);
		// Следующая итерация
		РасшифроватьОтветСлужебногоЭтапаЦикл(Контекст);
		Возврат;
	КонецЕсли;
	
	ФайлВложения = Контекст.Документ["Этап"][0]["Вложение"][Контекст.Итератор]["Файл"];
	ФайлВложения.Удалить("Ссылка");
	
	ДвоичныеДанныеСтр = "<?xml version=""1.0"" encoding=""UTF-8""?>"
		+ ПолучитьИзВременногоХранилища(Результат.АдресРасшифрованногоОтветаSOAP);
	ДвоичныеДанныеСтрBase64 = Base64Строка(
		ПолучитьДвоичныеДанныеИзСтроки(ДвоичныеДанныеСтр, КодировкаТекста.UTF8));
	ФайлВложения.Вставить("ДвоичныеДанные",	ДвоичныеДанныеСтрBase64);
	
	// Следующая итерация
	РасшифроватьОтветСлужебногоЭтапаЦикл(Контекст);
	
КонецПроцедуры

Процедура ОбработатьСписокИзмененийПослеОбработкиСлужебных(Результат, Контекст) Экспорт
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПослеОбработкиСпискаИзменений",
		Saby_ЭДОСФССКлиент,
		Контекст
	);
	Контекст.Вставить("Оповещение", ОписаниеОповещения);
	ОбработатьСписокИзменений(Контекст);	
КонецПроцедуры

Функция ОбработатьСписокИзменений(Контекст) 
	Результат = Ложь;
	sickleave_last_event = Новый Соответствие();
			
	// Массив всех входящих подтипов вложений которые необходимо обрабатывать.
	Контекст.Вставить("МассивОбрабатываемыхПодтиповВложений", Saby_ЭДОСФССПовтИсп.МассивОбрабатываемыхПодтиповВложений());
	
	
	Если Контекст.Свойство("context_params") Тогда
		context_params = Контекст.context_params;
	Иначе
		context_params = Saby_ЭДОСФСС.ПолучитьНастройкиПодключения();
		Контекст.Вставить("context_params", context_params);	
	КонецЕсли;	
	
    Фильтр = Новый Структура;
	Фильтр.Вставить(
	    "Навигация", Новый Структура(
	        "РазмерСтраницы", Формат(20, "ЧГ=0")
	    )
	); 
	Фильтр.Вставить("ТолькоОтчетность", "Да");
	Фильтр.Вставить("Тип", "ДокументСЭДО");
	
	Организация = Контекст.Организация;
	НашаОрганизация = Saby_ЭДОСФССПовтИсп.Saby_НашаОрганизация(Организация);
	Фильтр.Вставить("НашаОрганизация", НашаОрганизация);
	СвойстваОрганизации = НашаОрганизация.СвойстваОрганизации;
	
	Если context_params.Свойство("sickleave_last_event") 
		И ТипЗнч(context_params.sickleave_last_event) = Тип("Соответствие") Тогда
		ИдентификаторСобытия = context_params.sickleave_last_event.Получить(Организация);
	Иначе
		context_params.Вставить("sickleave_last_event", Новый Соответствие());
		ИдентификаторСобытия = Неопределено;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Контекст.ДатаСообщенийС) Тогда
		Фильтр.Вставить("ДатаВремяС", Формат(Контекст.ДатаСообщенийС, "ДФ='дд.ММ.гггг ЧЧ.мм.сс'"));
		Если Контекст.Свойство("ДатаСообщенийПо") И ЗначениеЗаполнено(Контекст.ДатаСообщенийПо) Тогда
			Фильтр.Вставить("ДатаВремяПо", Формат(Контекст.ДатаСообщенийПо, "ДФ='дд.ММ.гггг ЧЧ.мм.сс'"));
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторСобытия) Тогда
		Фильтр.Вставить("ИдентификаторСобытия", ИдентификаторСобытия);
	КонецЕсли;
	
	Контекст.Вставить("Фильтр", Фильтр);
	Контекст.Вставить("context_params", context_params);
	Контекст.Вставить("СвойстваОрганизации", СвойстваОрганизации);
	Контекст.Вставить("ЕстьЕще", "Да");
	Контекст.Вставить("ОбработаноИзменений", 0);
	
	ПолучитьСписокИзмененийЦикл(Контекст);
		
КонецФункции

Процедура ПолучитьСписокИзмененийЦикл(Контекст) 
	
	Если Контекст.ЕстьЕще <> "Да" Тогда
		Если Контекст.ОбработаноИзменений > 0 и Не Контекст.Свойство("ДатаСообщенийПо") Тогда
			Контекст.context_params.sickleave_last_event.Вставить(Контекст.Организация, Контекст.Фильтр.ИдентификаторСобытия);
			Saby_ЭДОСФСС.ЗаписатьНастройкиПодключения("sickleave_last_event", Контекст.context_params.sickleave_last_event);
		КонецЕсли;
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.Результат);
		Возврат;	
	КонецЕсли;
	
	Попытка
		СписокИзменений = Saby_ЭДОСФСС.СписокИзмененийПоДокументамСЭДО(Контекст.context_params, Контекст.Фильтр);
	Исключение
		ИнфОбОшибке = ИнформацияОбОшибке();
		ДобавитьОшибкуПолученияСообщенийФСС(Контекст, ИнфОбОшибке);
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.Результат);
		Возврат;
	КонецПопытки;
	Контекст.Вставить("СписокИзменений", СписокИзменений["Документ"]);
	Контекст.Вставить("ИндексСписокаИзменений", 0);
	Контекст.Вставить("ЕстьЕще", СписокИзменений["Навигация"]["ЕстьЕще"]);
	
	ОбработатьСписокИзмененийЦикл(Контекст);
		
КонецПроцедуры

Процедура ОбработатьСписокИзмененийЦикл(Контекст) 
	СписокИзменений = Контекст.СписокИзменений;
	ИндексСписокаИзменений = Контекст.ИндексСписокаИзменений;
	
	Если ИндексСписокаИзменений >= СписокИзменений.Количество() Тогда
		ПолучитьСписокИзмененийЦикл(Контекст);
		Возврат;
	КонецЕсли;
	
	Документ = СписокИзменений[ИндексСписокаИзменений];
		
	ПодтипВложения = Документ["Событие"][0]["Вложение"][0]["Подтип"]; 
	Если Контекст.МассивОбрабатываемыхПодтиповВложений.Найти(ПодтипВложения) = Неопределено Тогда
		ИдПоследнегоОбработанногоСобытия = Документ["Событие"][0]["Идентификатор"];	
		Контекст.Фильтр.Вставить("ИдентификаторСобытия", ИдПоследнегоОбработанногоСобытия);
		Контекст.ИндексСписокаИзменений = Контекст.ИндексСписокаИзменений + 1;
		ОбработатьСписокИзмененийЦикл(Контекст);
		Возврат;
	КонецЕсли;
	
	Попытка
		ОбработатьСобытиеДокумента(
		Документ,  
		Контекст.СвойстваОрганизации.Ссылка,
		Контекст
		);
	Исключение
		Ошибка = ИнформацияОбОшибке();
		Контекст.ИндексСписокаИзменений = Контекст.ИндексСписокаИзменений + 1;
		ОбработатьСписокИзмененийЦикл(Контекст);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьСобытиеДокумента(Документ, Организация, Контекст)

	СообщениеФССXML = Saby_ЭДОСФСС.ЗагрузитьСообщениеФССXMLИзСбис(
		Документ["Событие"][0]["Вложение"][0]["Подпись"][0]["Файл"]["Ссылка"]
	);
	//!!! Файл вложения пустой, выяснить почему!
	Если СообщениеФССXML = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("АдресПодписаногоЗапросаSOAP", ПоместитьВоВременноеХранилище(""));
	Результат.Вставить("АдресРасшифрованногоОтветаSOAP", ПоместитьВоВременноеХранилище(СообщениеФССXML, Новый УникальныйИдентификатор()));
	Результат.Вставить("ОписаниеОшибки", ""); 
	Результат.Вставить("ДанныеСообщения", "");
	Результат.Вставить("АдресРесурса", "");
	Результат.Вставить("АдресСервера", ""); 
	Результат.Вставить("КодСостояния", 200);  
	
	Контекст.Вставить("Документ", Документ);
	
	// SEDI_UUID - это UUID который мы должны были получить после нажатия кнопки "Отправить в фонд", но
	// так как отправка происходит асинхронно, UUID мы получаем позже и вызываем другую функцию обработчик.
	// Для всех остальных типов вложений мы вызываем единую функцию обрабтчик.
	Если Документ["Событие"][0]["Вложение"][0]["Подтип"] = "SEDI_UUID" Тогда			 
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить(
			"Результат", 
			Новый Структура("Выполнено, ОписаниеОшибки, ИдентификаторЗапроса")
		);
		ДополнительныеПараметры.Вставить("ОписаниеОшибки", "");
		ДополнительныеПараметры.Вставить("Организация", Организация);
		ДополнительныеПараметры.Вставить("Операция", "");
		ДополнительныеПараметры.Вставить("ТипСообщения", "");
		ДополнительныеПараметры.Вставить("ТипВзаимодействия", 2);
		ДополнительныеПараметры.Вставить("НастройкиЗаписиОтправки", Неопределено);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеОбработки1СSEDI_UUID",
			Saby_ЭДОСФССКлиент,
			Контекст
		);
		ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОписаниеОповещения);
		
		//!!! Проверить корректность работы
		Контекст.КонтекстЭДОКлиент.ОтправитьСообщениеСЭДОФССПослеЗапроса(Результат, ДополнительныеПараметры);	
	Иначе
		Если Документ["Расширение"]["ПодТипКомплекта"] = "SEDI_NOTICE" Тогда
			Если Документ["Событие"][0]["Название"] = "подтверждение" Тогда
				ИдентификаторыСообщений = Новый Массив();
				ДатаСобытия = ПреобразоватьСтрокуВДату("dd.MM.yyyy HH.mm.ss",  Документ["Событие"][0]["ДатаВремя"]);
				ИдентификаторыСообщений.Добавить(Новый Структура("Идентификатор, Дата", Документ["Идентификатор"], ДатаСобытия));
				Saby_ЭДОСФСС.СохранитьДатуОтправкиПодтвержденияОПрочтении(Организация, ИдентификаторыСообщений);			
			КонецЕсли;
		КонецЕсли;
		ДополнительныеПараметры = Новый Структура;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеОбработкиИзменения",
			Saby_ЭДОСФССКлиент,
			Контекст
		);
		ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОписаниеОповещения);
		ДополнительныеПараметры.Вставить("Операция", "");
		ДополнительныеПараметры.Вставить("ИдентификаторСообщения", "");
		ДополнительныеПараметры.Вставить("ТипВзаимодействия", "");
		ДополнительныеПараметры.Вставить("Организация", Организация);
		ДополнительныеПараметры.Вставить(
			"Результат", 
			Новый Структура(
				"Выполнено, ДанныеСообщения, ОшибкиПоОрганизациям, РезультатыПоОрганизациям, ОписаниеОшибки",
				Истина,
				Новый Структура,
				Новый Соответствие,
				Новый Соответствие,
				""
			)
		);
		
		//!!! Проверить корректность работы
		Контекст.КонтекстЭДОКлиент.ПолучитьСообщениеСЭДОФССПослеЗапроса(Результат, ДополнительныеПараметры);	
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПослеОбработки1СSEDI_UUID(Результат, Контекст) Экспорт
	
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	Saby_ЭДОСФСС.ЗаписатьSEDI_UUID(Результат.ИдентификаторЗапроса, Контекст.Документ);
	
	ИдПоследнегоОбработанногоСобытия = Контекст.Документ["Событие"][0]["Идентификатор"];	
	Контекст.Фильтр.Вставить("ИдентификаторСобытия", ИдПоследнегоОбработанногоСобытия);
	Контекст.ИндексСписокаИзменений = Контекст.ИндексСписокаИзменений + 1;
	Контекст.ОбработаноИзменений = Контекст.ОбработаноИзменений + 1;
	ОбработатьСписокИзмененийЦикл(Контекст);
	
КонецПроцедуры

Процедура ПослеОбработкиИзменения(Результат, Контекст) Экспорт
	
	Если Результат <> Неопределено
		И Результат.ОписаниеОшибки = ""
		И ТипЗнч(Контекст.ОповещениеОбратногоВызова.ДополнительныеПараметры) = Тип("Структура")
		И Контекст.ОповещениеОбратногоВызова.ДополнительныеПараметры.Свойство("ИдентификаторыСообщений") Тогда
		Контекст.ОповещениеОбратногоВызова.ДополнительныеПараметры.ИдентификаторыСообщений[Контекст.Организация].Добавить(Результат.ДанныеСообщения.Идентификатор);
	КонецЕсли;
	
	ИдПоследнегоОбработанногоСобытия = Контекст.Документ["Событие"][0]["Идентификатор"];	
	Контекст.Фильтр.Вставить("ИдентификаторСобытия", ИдПоследнегоОбработанногоСобытия);
	Контекст.ИндексСписокаИзменений = Контекст.ИндексСписокаИзменений + 1;
	Контекст.ОбработаноИзменений = Контекст.ОбработаноИзменений + 1;
	ОбработатьСписокИзмененийЦикл(Контекст);
	
КонецПроцедуры

Процедура ПослеОбработкиСпискаИзменений(Результат, Контекст) Экспорт
	Контекст.ИтерацияПоОрганизации = Контекст.ИтерацияПоОрганизации + 1;	
	ПолучитьВходящиеСообщенияСЭДОФССПоОрганизацииЦикл(Контекст);
КонецПроцедуры

Процедура ОбработатьСписокИзмененийЗавершение(Результат, Контекст) Экспорт
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеОбратногоВызова, Контекст.Результат);
КонецПроцедуры

Процедура ДобавитьОшибкуПолученияСообщенийФСС(Контекст, ИнфОбОшибке)
	Контекст.Результат.БылиОшибки = Истина;
	Если Контекст.Результат.Свойство("ОшибкиПоОрганизациям") Тогда
		Если Контекст.Результат.ОшибкиПоОрганизациям.Получить(Контекст.Организация) = Неопределено Тогда
			Контекст.Результат.ОшибкиПоОрганизациям.Вставить(Контекст.Организация, Новый Массив);
		КонецЕсли;
		Контекст.Результат.ОшибкиПоОрганизациям[Контекст.Организация].Добавить(ИнфОбОшибке.Описание);
	Иначе
		Контекст.Результат.РезультатыПолучения.Добавить(Новый Структура("ОписаниеОшибки", ИнфОбОшибке.Описание));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОтправкаПодтвержденияОПолученииСообщенийСЭДО

Процедура ОтправитьПодтверждениеОПолученииСообщенийСЭДО(ОповещениеОбратногоВызова, Организация, ИдентификаторыСообщений) Экспорт
    // так как подтверждение формируется автоматически при обработке служебных, то вызываем стандартный код получения сообщений с обработкой служебных и списка изменений
	Организации = Новый Массив();
	Организации.Добавить(Организация);
	ПолучитьВходящиеСообщенияСЭДО(ОповещениеОбратногоВызова, Организации)
КонецПроцедуры

#КонецОбласти

#Область include_core_src_Helpers_ПреобразованиеТипов
#КонецОбласти